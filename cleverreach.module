<?php

/**
 * @file
 * Primarily Drupal hooks and global API functions to manage the process.
 *
 * This is the main module file for CleverReach. The main entry point into
 * this module is _cleverreach_update_group_cache(), where it handles
 * the import of groups from cleverreach.
 */

define('CLEVERREACH_GROUPS_CACHE_ID', 'cleverreach_groups');

/**
 * Implements hook_permission().
 */
function cleverreach_permission() {
  return array(
    'administer cleverreach' => array(
      'title' => t('Administer CleverReach Module'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function cleverreach_menu() {
  // Most of the UI is provided by Entity API Admin UI.
  $items['admin/config/services/cleverreach/settings'] = array(
    'title' => 'Settings',
    'description' => 'Fill in your Cleverreach API data.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_cleverreach_admin_settings'),
    'access arguments' => array('administer cleverreach'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'cleverreach.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_entity_info().
 */
function cleverreach_entity_info() {
  return array(
    'cleverreach_block' => array(
      'label' => 'Cleverreach Block',
      'entity class' => 'CleverReachBlock',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'cleverreach_block_forms',
      'fieldable' => FALSE,
      'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'bid',
        'name' => 'name',
        'label' => 'label',
      ),
      'label callback' => 'cleverreach_block_entity_label',
      'access callback' => 'cleverreach_block_entity_access',
      'module' => 'cleverreach',
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/config/services/cleverreach',
        'file' => 'cleverreach.admin.inc',
        'controller class' => 'CleverReachBlockUIController',
      ),
    ),
  );
}

/**
 * Access callback for the entity API.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $profile
 *   (optional) A block to check access for. If nothing is given, access for
 *   all profiles is determined.
 * @param $account
 *   (optional) The user to check for. Leave it to NULL to check for the global user.
 *
 * @return boolean
 *   Whether access is allowed or not.
 */
function cleverreach_block_entity_access($op, $profile = NULL, $account = NULL) {
  return user_access('administer cleverreach', $account);
}

/**
 * Label callback for the entity API.
 *
 * @param Entity $entity
 * @param string $entity_type
 *
 * @return string
 */
function cleverreach_block_entity_label($entity, $entity_type) {
  if (!empty($entity) && isset($entity->label)) {
    return $entity->label;
  }
  return '';
}

/**
 * Gets an array of multiple cleverreach blocks.
 *
 * @param array $names
 *   Array of machine names to load.
 *
 * @return CleverReachBlock[]
 */
function cleverreach_get_blocks($names) {
  return entity_load_multiple_by_name('cleverreach_block', $names);
}

/**
 * Get a single cleverreach form.
 *
 * @param string $name
 *   Machine name of the form to load.
 *
 * @return CleverReachBlock
 */
function cleverreach_get_block($name) {
  $forms = cleverreach_get_blocks(array($name));
  return current($forms);
}

/**
 * Gets all cleverreach block objects.
 *
 * @return CleverReachBlock[]
 */
function cleverreach_get_all_blocks() {
  return entity_load_multiple_by_name('cleverreach_block', FALSE);
}

/**
 * Gets all cleverreach group objects.
 *
 * @return CleverReachGroup[]
 */
function cleverreach_get_all_groups() {
  $cache = cache_get(CLEVERREACH_GROUPS_CACHE_ID);
  if ($cache === FALSE) {
    return _cleverreach_update_group_cache();
  }
  return $cache->data;
}

/**
 * Get a single group.
 *
 * @param $crgid
 *   CleverReach group id.
 *
 * @return CleverReachGroup
 */
function cleverreach_get_single_group($crgid) {
  $groups = cleverreach_get_all_groups();
  if (isset($groups[$crgid])) {
    return $groups[$crgid];
  }
}

/**
 * Provides an options array for use in forms.
 *
 * @return array
 */
function cleverreach_get_group_options() {
  $options = array();
  $groups = cleverreach_get_all_groups();
  foreach ($groups as $group) {
    $options[$group->id] = $group->name;
  }
  return $options;
}

/**
 * Function to get API Settings from Drupal Variables. 
 */
function _cleverreach_get_settings() {
  $cr_api = array(
    'key' => variable_get('cleverreach_api_key', ''),
    'url' => variable_get('cleverreach_wsdl_url', ''),
  );

  if (empty($cr_api["key"]) || empty($cr_api["url"])) {
    watchdog('CleverReach', 'api settings are incomplete');
    return FALSE;
  }
  else {
    return $cr_api;
  }
}

/**
 * Implements hook_cron().
 */
function cleverreach_cron() {
  $queue = DrupalQueue::get('cleverreach_group_update_cron');
  $queue->createItem(array());
}

/**
 * Implements hook_cron_queue_info().
 */
function cleverreach_cron_queue_info() {
  $queues['cleverreach_group_update_cron'] = array(
    'worker callback' => '_cleverreach_update_group_cache',
    'time' => 120,
  );
  return $queues;
}

/**
 * Update the groups cache from the cleverreach server.
 *
 * @return CleverReachGroup[]
 */
function _cleverreach_update_group_cache() {
  $settings = _cleverreach_get_settings();

  $groups = array();

  if (is_array($settings)) {
    $api = new SoapClient($settings["url"]);
    $result = $api->groupGetList($settings["key"]);

    if ($result->status == 'SUCCESS') {

      foreach ($result->data as $group) {
        $details = $api->groupGetDetails($settings["key"], $group->id);
        $group = array_merge(get_object_vars($group), get_object_vars($details->data));

        $group_object = new CleverReachGroup($group);

        $groups[$group_object->id] = $group_object;
      }

      cache_set(CLEVERREACH_GROUPS_CACHE_ID, $groups);

      watchdog('CleverReach', 'groups updated successfully', array(), WATCHDOG_INFO);
    }
    else {
      cache_set(CLEVERREACH_GROUPS_CACHE_ID, array());
      watchdog('CleverReach', 'group update failed', array(), WATCHDOG_ERROR);
    }
  }
  else {
    cache_set(CLEVERREACH_GROUPS_CACHE_ID, array());
    watchdog('CleverReach', 'CleverReach group update failed.', array(), WATCHDOG_ERROR);
  }

  return $groups;
}

/**
 * Implements hook_block_info().
 */
function cleverreach_block_info() {
  $blocks = array();

  $block_objects = cleverreach_get_all_blocks();

  foreach ($block_objects as $block) {
    if ($block->active) {
      $blocks[$block->name] = array(
        'info' => t('CleverReach: @grpname', array('@grpname' => $block->getGroup()->label())),
        'cache' => DRUPAL_NO_CACHE,
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function cleverreach_block_view($delta) {
  $output = array();

  $block = cleverreach_get_block($delta);
  if ($block && $block->active) {
    $output['subject'] = t('CleverReach: @grpname', array('@grpname' => $block->getGroup()->label()));
    $output['content'] = drupal_get_form('cleverreach_subscribe_form_' . $block->name);
  }

  return $output;
}

/**
 * Implements hook_forms().
 */
function cleverreach_forms($form_id, $args) {
  $forms = array();

  if (strpos($form_id, 'cleverreach_subscribe_form_') === 0) {

    module_load_include('inc', 'cleverreach', 'cleverreach.subscribe');
    $block_name = substr($form_id, strlen('cleverreach_subscribe_form_'));
    $forms[$form_id] = array(
      'callback' => 'cleverreach_subscribe_form',
      'callback arguments' => array(
        cleverreach_get_block($block_name),
      ),
    );
  }

  return $forms;
}

/**
 * Implements hook_theme().
 */
function cleverreach_theme($existing, $type, $theme, $path) {
  return array(
    'cleverreach_tableform' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function cleverreach_contextual_links_view_alter(&$element, &$items) {

  if (isset($element['#element']['#block']) && $element['#element']['#block']->module == 'cleverreach') {
    $element['#links']['cleverreach'] = array(
      'title' => 'CleverReach: Edit block',
      'href' => url('admin/config/services/cleverreach/manage/' . $element['#element']['#block']->delta, array('absolute' => TRUE)),
    );
  }
}

/**
 * Theming function for rendering form rows in a table.
 */
function theme_cleverreach_tableform($variables) {
  $element = $variables['element'];

  $columns = $element['#columns'];
  $rows = array();

  foreach (element_children($element) as $child_key) {
    $row = array();

    // Add additional column for tabledrag.
    if (isset($columns['weight'])) {
      $row[] = array('class' => array('entry-cross'));
    }

    foreach ($columns as $column => $column_name) {
      $row[$column] = array(
        'data' => isset($element[$child_key][$column]) ? $element[$child_key][$column] : '',
      );
    }

    $rows[] = array(
      'data' => $row,
      'class' => array('draggable'),
    );
  }

  $table_id = drupal_html_id('cleverreach_tableform');

  if (isset($columns['weight'])) {
    // For initial rendering we need to sort the rows manually.
    usort($rows, '_cleverreach_sort_tabledrag');

    // Add additional header for tabledrag.
    array_unshift($element['#columns'], '');
    // ... and the JS for tabledrag.
    drupal_add_tabledrag($table_id, 'order', 'sibling', 'draggable-weight');
  }

  return theme('table', array(
    'header' => array_values($element['#columns']),
    'rows' => $rows,
    'caption' => $element['#caption'],
    'attributes' => array('id' => $table_id),
  ));
}

/**
 * Sort callback for tabledrag rows.
 */
function _cleverreach_sort_tabledrag($a, $b) {
  if (!isset($a['data']['weight']['data']['#default_value'])) {
    return -1;
  }
  elseif (!isset($b['data']['weight']['data']['#default_value'])) {
    return +1;
  }
  else {
    return $a['data']['weight']['data']['#default_value'] > $b['data']['weight']['data']['#default_value'];
  }
}

/**
 * Retrieve a list of configured forms for the given group.
 *
 * @param int $group_id
 *
 * @return CleverReachForm[]
 *   List of group forms.
 */
function cleverreach_get_forms($group_id) {
  $settings = _cleverreach_get_settings();

  $forms = array();

  if (is_array($settings)) {
    $api = new SoapClient($settings["url"]);
    $result = $api->formsGetList($settings["key"], $group_id);

    if ($result->status == 'SUCCESS') {
      foreach ($result->data as $data) {
        $form = new CleverReachForm(get_object_vars($data));
        $forms[$form->id] = $form;
      }
    }
    else {
      watchdog('CleverReach', 'Could not retrieve forms for Group @id', array('@id' => $group_id), WATCHDOG_ERROR);
    }
  }
  return $forms;
}

/**
 * Retrieve authentication options for the given group.
 *
 * @param int $group_id
 *   CleverReach group ID/listid.
 *
 * @return array
 *   Array of authentication options. Keys are the form id holding the opt-in
 *   mail configuration. The empty key is the option for no confirmation and
 *   will subscribe the mail adress without confirmation.
 */
function cleverreach_get_form_options($group_id) {
  $options = array();
  foreach (cleverreach_get_forms($group_id) as $form) {
    $options[$form->id] = check_plain($form->name);
  }
  return $options;
}
